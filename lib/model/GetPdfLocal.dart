import 'dart:io';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:pdf_render/pdf_render.dart';

class PdfScanner with ChangeNotifier {
  List<Map<String, dynamic>> _pdfFiles = []; // üìå List of PDF Details
  bool _isLoading = false;

  List<Map<String, dynamic>> get pdfFiles => _pdfFiles;
  bool get isLoading => _isLoading;

  /// üìå **1Ô∏è‚É£ SharedPreferences ‡§∏‡•á ‡§∏‡•á‡§µ ‡§ï‡§ø‡§è ‡§ó‡§è PDF ‡§™‡§æ‡§• ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç**
  Future<void> loadPdfPaths() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> savedPaths = prefs.getStringList('pdf_paths') ?? [];

    _pdfFiles = savedPaths.map((path) {
      return {
        'path': path,
        'size': getFileSize(path),
        'folder': getFolderName(path),
        'pages': 0,  // Pages ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç Load ‡§π‡•ã‡§Ç‡§ó‡•á
      };
    }).toList();

    // ‡§Ö‡§¨ ‡§∏‡§≠‡•Ä PDFs ‡§ï‡•á ‡§™‡•á‡§ú ‡§®‡§Ç‡§¨‡§∞ ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
    for (var pdf in _pdfFiles) {
      pdf['pages'] = await getPdfPageCount(pdf['path']);
    }

    notifyListeners();
  }

  /// üìå **2Ô∏è‚É£ PDF ‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ SharedPreferences ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç**
  Future<void> scanAndSavePdfFiles(String directoryPath) async {
    _isLoading = true;
    notifyListeners();

    List<File> pdfFiles = await scanForPDFFiles(directoryPath);
    _pdfFiles = pdfFiles.map((file) {
      return {
        'path': file.path,
        'size': getFileSize(file.path),
        'folder': getFolderName(file.path),
        'pages': 0,  // Pages ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç Load ‡§π‡•ã‡§Ç‡§ó‡•á
      };
    }).toList();

    // ‡§Ö‡§¨ ‡§∏‡§≠‡•Ä PDFs ‡§ï‡•á ‡§™‡•á‡§ú ‡§®‡§Ç‡§¨‡§∞ ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
    for (var pdf in _pdfFiles) {
      pdf['pages'] = await getPdfPageCount(pdf['path']);
    }

    // SharedPreferences ‡§Æ‡•á‡§Ç Save ‡§ï‡§∞‡•á‡§Ç
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setStringList(
      'pdf_paths',
      _pdfFiles.map<String>((pdf) => pdf['path'] as String).toList(),
    );


    _isLoading = false;
    notifyListeners();
  }

  /// üìå **3Ô∏è‚É£ ‡§∏‡•ç‡§™‡•á‡§∏‡§ø‡§´‡§ø‡§ï ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§Æ‡•á‡§Ç PDF ‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡•á‡§Ç**
  Future<List<File>> scanForPDFFiles(String directoryPath) async {
    List<File> pdfFiles = [];
    Directory directory = Directory(directoryPath);

    Future<void> scanDirectory(Directory dir) async {
      try {
        await for (var entity in dir.list(recursive: false, followLinks: false)) {
          if (entity is File && entity.path.endsWith('.pdf')) {
            pdfFiles.add(entity);
          } else if (entity is Directory) {
            await scanDirectory(entity);
          }
        }
      } catch (e) {
        print('Error while scanning directory: $e');
      }
    }

    await scanDirectory(directory);
    return pdfFiles;
  }

  /// üìå **4Ô∏è‚É£ ‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§®‡§Ø‡§æ ‡§°‡•á‡§ü‡§æ ‡§∏‡•ç‡§ï‡•à‡§® ‡§î‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç**
  Future<void> refreshPdfFiles(String directoryPath) async {
    await scanAndSavePdfFiles(directoryPath);
  }

  /// üìå **5Ô∏è‚É£ PDF ‡§ï‡§æ Size (MB ‡§Ø‡§æ KB) ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®**
  String getFileSize(String filePath) {
    File file = File(filePath);
    int bytes = file.lengthSync();
    if (bytes < 1024) {
      return '$bytes B';
    } else if (bytes < 1024 * 1024) {
      return '${(bytes / 1024).toStringAsFixed(2)} KB';
    } else {
      return '${(bytes / (1024 * 1024)).toStringAsFixed(2)} MB';
    }
  }

  /// üìå **6Ô∏è‚É£ Folder Name ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®**
  String getFolderName(String filePath) {
    return filePath.split('/')[filePath.split('/').length - 2]; // PDF ‡§ï‡•á Parent Folder ‡§ï‡§æ ‡§®‡§æ‡§Æ
  }

  /// üìå **7Ô∏è‚É£ PDF ‡§Æ‡•á‡§Ç Total Pages ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®**
  Future<int> getPdfPageCount(String filePath) async {
    try {
      final doc = await PdfDocument.openFile(filePath);
      return doc.pageCount;
    } catch (e) {
      print('Error getting page count: $e');
      return 0;
    }
  }
}
